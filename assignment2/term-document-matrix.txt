Term-Document Matrix
--------------------

docid | term1 | term2 | ... | termN
------+-------+-------+-----+-------
001a  |     3 |     0 | ... |     0
002b  |     0 |     2 | ... |     0

- row of the matrix is a document vector
- one column for every term
- value in each cell is the term frequency

==========================================================

Testes
------

A = (
1	2	3
4	5	6
7	8	9
)

At = (
1	4	7
2	5	8
3	6	9
)

A x At = (
14	32	50
32	77	122
50	122	194
)

CREATE TABLE a (row int, col int, val int);
INSERT INTO a VALUES (1, 1, 1);
INSERT INTO a VALUES (1, 2, 2);
INSERT INTO a VALUES (1, 3, 3);
INSERT INTO a VALUES (2, 1, 4);
INSERT INTO a VALUES (2, 2, 5);
INSERT INTO a VALUES (2, 3, 6);
INSERT INTO a VALUES (3, 1, 7);
INSERT INTO a VALUES (3, 2, 8);
INSERT INTO a VALUES (3, 3, 9);

-- At (transposta)
--CREATE TABLE at (row int, col int, val int);
--INSERT INTO at
CREATE VIEW at AS
SELECT a.col, a.row, b.val
FROM a JOIN a b ON (a.row = b.row AND a.col = b.col)
ORDER BY 1, 2;

-- A x At
--CREATE TABLE axat (row int, col int, val int);
--INSERT INTO axat
CREATE VIEW axat AS
SELECT a.row, b.col, sum(a.val * b.val) AS val
FROM a JOIN at AS b ON (a.col = b.row)
GROUP BY a.row, b.col
ORDER BY 1, 2;

-- (At)t = A (transposta da transposta)
--CREATE TABLE att (row int, col int, val int);
--INSERT INTO att
CREATE VIEW att AS
SELECT a.col, a.row, b.val
FROM at a JOIN at b ON (a.row = b.row AND a.col = b.col)
ORDER BY 1, 2;
SELECT * FROM att;

==========================================================

Resolução
---------

CREATE TABLE TransposeFrequency (
  term varchar,
  docid varchar,
  count int
);

INSERT INTO TransposeFrequency
--CREATE VIEW TransposeFrequency AS
SELECT b.term, a.docid, a.count
FROM Frequency AS a
  JOIN Frequency AS b ON (a.rowid = b.rowid)
ORDER BY 1, 2;

CREATE INDEX TransposeFrequencyIdx
  ON TransposeFrequency (term, docid);

CREATE TABLE SimilarityFrequency (
  row varchar,
  col varchar,
  val int
);

INSERT INTO SimilarityFrequency
--CREATE VIEW SimilarityFrequency AS
SELECT a.docid AS row, b.docid AS col, sum(a.count * b.count) AS val
FROM Frequency AS a
  JOIN TransposeFrequency AS b ON (a.term = b.term)
WHERE a.docid != b.docid
--  AND a.docid < b.docid
GROUP BY a.docid, b.docid
ORDER BY 1, 2;

-- CPU Time: user 205.124819 sys 8.060504

CREATE INDEX SimilarityFrequencyIdx
  ON SimilarityFrequency (row, col);

sqlite> SELECT count(1) FROM SimilarityFrequency;
5117852

-- exemplo de consulta

SELECT col AS docid, val AS value
FROM SimilarityFrequency
WHERE row = '17035_txt_earn' OR row = '10080_txt_crude'
ORDER BY val DESC, col;

SELECT val AS value
FROM SimilarityFrequency
WHERE row = '17035_txt_earn' AND col = '10080_txt_crude';

==========================================================

Resolução Alternativa
---------------------


-- similaridade entre dois documentos

SELECT sum(a.count * b.count) AS similarity
FROM Frequency AS a
JOIN (
  SELECT d.term, c.docid, c.count
  FROM Frequency AS c
    JOIN Frequency AS d ON (c.rowid = d.rowid)
) AS b ON (a.term = b.term)
WHERE a.docid = '17035_txt_earn'
  AND b.docid = '10080_txt_crude';


-- similaridade de um documento com os demais

SELECT b.docid, sum(a.count * b.count) AS similarity
FROM Frequency AS a
JOIN (
  SELECT d.term, c.docid, c.count
  FROM Frequency AS c
    JOIN Frequency AS d ON (c.rowid = d.rowid)
) AS b ON (a.term = b.term)
WHERE a.docid = '17035_txt_earn'
GROUP BY b.docid
ORDER BY similarity DESC
LIMIT 15;

==========================================================

INSERT INTO Frequency
SELECT 'q' as docid, 'washington' as term, 1 as count 
UNION
SELECT 'q' as docid, 'taxes' as term, 1 as count
UNION 
SELECT 'q' as docid, 'treasury' as term, 1 as count;

SELECT max(similarity)
FROM (
  SELECT b.docid, sum(a.count * b.count) AS similarity
  FROM Frequency AS a
  JOIN (
    SELECT d.term, c.docid, c.count
    FROM Frequency AS c
      JOIN Frequency AS d ON (c.rowid = d.rowid)
  ) AS b ON (a.term = b.term)
  WHERE a.docid = 'q'
  GROUP BY b.docid
);

